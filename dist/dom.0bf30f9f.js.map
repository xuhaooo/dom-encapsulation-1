{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.0bf30f9f.js","sourceRoot":"../src","sourcesContent":["window.dom = {\n    create(string) {\n        const container = document.createElement('template')\n        // template 标签可以容纳任意元素，专门用来容纳不显示，同时不能通过 children 来拿到\n        // trim 一下，不然儿子一就是文本\n        container.innerHTML = string.trim()\n        return container.content.firstChild\n    },\n    after(node, node2){\n        node.parentNode.insertBefore(node2, node.nextSibling)\n    },\n    before(node, node2){\n        node.parentNode.insertBefore(node2, node)\n    },\n    append(parent, node){\n        parent.appendChild(node)\n    },\n    wrap(node, parent){\n        dom.before(node, parent)\n        dom.append(parent, node)\n    },\n    remove(node){\n        node.parentNode.removeChild(node)\n        return node\n    },\n    empty(node){\n        const array = []\n        let x = node.firstChild\n        while(x){\n            array.push(dom.remove(node.firstChild))\n            x = node.firstChild\n        }\n        return array\n    },\n    attr(node, name, value){\n        if(arguments.length === 3){\n            node.setAttribute(name, value)\n        }else if(arguments.length === 2){\n            return node.getAttribute(name)\n        }\n    },\n    text(node, string){\n        if(arguments.length === 2){\n            if ('innerText' in node) {\n                node.innerText = string\n            }else{\n                node.textContent == string\n            }\n        }else if(arguments.length === 1){\n            if ('innerText' in node) {\n                return node.innerText\n            }else{\n                return node.textContent\n            }\n        }\n    },\n    html(node, string){\n        if(arguments.length === 2){\n            node.innerHTML = string\n        }else if(arguments.length === 1){\n            return node.innerHTML\n        }\n    },\n    style(node, name, value) {\n        if(arguments.length === 3){\n            node.style[name] = value\n        }else if(arguments.length === 2){\n            if(typeof name === 'string'){\n                return node.style[name]\n            }else if(name instanceof Object){\n                const object = name\n                for(let key in object){\n                    node.style[key] = object[key]\n                }\n            }\n        }\n    },\n    class: {\n        add(node, className){\n            node.classList.add(className)\n        },\n        remove(node, className){\n            node.classList.remove(className)\n        },\n        has(node, className){\n            return node.classList.contains(className)\n        }\n    },\n    on(node, eventName, fn){\n        node.addEventListener(eventName, fn)\n    },\n    off(node, eventName, fn){\n        node.removeEventListener(eventName, fn)\n    },\n    // 上面一直都是用全局 id 访问元素，现在实现“查”，即给一个“选择器”返回一个元素\n    find(selector, scope){\n        return (scope || document).querySelectorAll(selector)\n    },\n    parent(node){\n        return node.parentNode\n    },\n    children(node){\n        return node.children\n    },\n    siblings(node){\n        return Array.from(node.parentNode.children)\n        .filter(n=>n!==node)\n    },\n    next(node){\n        let x = node.nextSibling\n        while(x && x.nodeType === 3){\n            x = x.nextSibling\n        }\n        return x\n    },\n    previous(node){\n        let x = node.previousSibling\n        while(x && x.nodeType === 3){\n            x = x.previousSibling\n        }\n        return x\n    },\n    each(nodeList, fn){\n        for (let i = 0; i < nodeList.length; i++) {\n            fn.call(null, nodeList[i])\n            \n        }\n    },\n    index(node){\n        const list = dom.children(node.parentNode)\n        let i\n        for (i = 0; i < list.length; i++) {\n            if(list[i] === node){\n                break\n            }\n        }\n        return i\n    }\n}"]}